(function (factory) {
    typeof define === 'function' && define.amd ? define(factory) :
    factory();
})((function () { 'use strict';

    /**
    * Addonify Floating Cart Object.
    *
    * @since 1.0.0
    */
    let addonifyFloatingCart = new Object();

    addonifyFloatingCart = {

        /**
        * jQuery Object.
        *
        */
        $: jQuery,

        /**
        * Action object.
        * Collection of methods that can be used to perform actions.
        */
        action: { trigger: null, toast: null, cart: null },

        /**
        * API object.
        * Collection of event dispatchers.
        */
        api: { event: null },
    };

    window.addonifyFloatingCart = addonifyFloatingCart;

    /**
    * Localization: Ajax & nonce.
    * 
    * @since: 1.1.9
    */
    const ajaxUrl = addonifyFloatingCartJSObject.ajax_url;

    const nonce = addonifyFloatingCartJSObject.nonce;

    /**
    * Localization: Refresh cart fragments action.
    * 
    * @since: 1.1.9
    */
    const refreshCartFragmentsAction = addonifyFloatingCartJSObject.ajax_refresh_cart_fragments;

    const ajaxUpdateCartAction = addonifyFloatingCartJSObject.ajax_update_cart_item_action;

    const ajaxRemoveFromCartAction = addonifyFloatingCartJSObject.ajax_remove_from_cart_action;

    const ajaxRestoreCartItemAction = addonifyFloatingCartJSObject.ajax_restore_in_cart_action;

    /**
    * Localization: Add to cart button settings.
    * 
    * @since: 1.1.9
    */
    const openCartOnAddedToCart = addonifyFloatingCartJSObject.open_cart_modal_immediately_after_add_to_cart === '1' ? true : false;

    const openCartOnViewCartClicked = addonifyFloatingCartJSObject.open_cart_modal_after_click_on_view_cart === '1' ? true : false;


    /**
    * Localization: Trigger button settings.
    * 
    * @since: 1.1.9
    */
    const openCartOnTriggerHover = addonifyFloatingCartJSObject.openCartModalOnTriggerButtonHover === '1' ? true : false;

    const hideTriggerButtonIfCartIsEmpty = addonifyFloatingCartJSObject.hideTriggerButtonIfCartIsEmpty === '1' ? true : false;

    /**
    * Localization: Notfy settings.
    * Notification toast settings.
    * 
    * @since: 1.1.9
    */
    const showNotfy = addonifyFloatingCartJSObject.addonifyFloatingCartNotifyShow === '1' ? true : false;

    const notyfDuration = addonifyFloatingCartJSObject.addonifyFloatingCartNotifyDuration;

    const notfyIsDismissible = addonifyFloatingCartJSObject.addonifyFloatingCartNotifyDismissible === '1' ? true : false;

    const notfyPosition = addonifyFloatingCartJSObject.toast_notification_display_position.split("-");

    addonifyFloatingCartJSObject.displayToastNotificationButton === '1' ? true : false;

    /**
     * Localization: Coupon settings.
     *
     * @since 1.1.9
     */
    const ajaxApplyCouponCodeAction = addonifyFloatingCartJSObject.ajax_apply_coupon;

    const ajaxRemoveCouponCodeAction = addonifyFloatingCartJSObject.ajax_remove_coupon;

    /**
    * Localization: Shipping calculator settings.
    * 
    * @since: 1.1.9
    */

    const { $: $$7, action: action$1, api: api$1 } = addonifyFloatingCart;

    function registerCartActionEvents() {

        action$1.cart = {

            /**
            * Handle cart open event.
            *
            * @param {*} e 
            * @return {void} void.
            * @since 1.0.0
            */
            open: (e) => {

                e.preventDefault();

                $$7("body").addClass("adfy__woofc-visible");

                // Dispatch custom event.
                api$1.event.cartOpened(e);
            },

            /**
            * Handle close open event.
            *
            * @param {*} e 
            * @return {void} void.
            * @since 1.0.0
            */
            close: (e) => {

                e.preventDefault();

                $$7("body").removeClass("adfy__woofc-visible");

                // Dispatch custom event.
                api$1.event.cartClosed(e);
            }
        };

        action$1.trigger = function (action) {

            const buttonEle = document.getElementById("adfy__toggle-woofc");

            if (
                (action !== '') &&
                (buttonEle) &&
                (buttonEle.hasAttribute('data_display'))
            ) {
                if (action === 'hide') {

                    buttonEle.setAttribute('data_display', 'hidden');
                }

                if (action === 'show') {

                    buttonEle.setAttribute('data_display', 'visible');
                }
            }
        };
    }

    /**
    * Refresh cart fragments.
    *
    * @param {null} null.
    * @return {void} void.
    * @since 1.0.0
    */
    const refreshCart = async () => {
        try {
            const { fragments } = await $$7.ajax({
                type: 'POST',
                dataType: 'json',
                url: ajaxUrl,
                data: {
                    action: refreshCartFragmentsAction,
                    nonce: nonce,
                },
            });

            if (!fragments) {

                throw new Error('Fragments not fetched! aborting...');
            }

            // Replace fragments.
            $$7.each(fragments, function (key, value) {
                $$7(key).replaceWith(value);
            });

            // Update cart.
            $$7(document).trigger('wc_update_cart');

            // Dispatch event cart updated. Since 1.2.1
            addonifyFloatingCart.api.event.cartUpdated(fragments);

        } catch (err) {
            throw new Error(err);
        }
    };

    const { $: $$6, api } = addonifyFloatingCart;

    function registerCustomEventsDispatchers() {

        api.event = {

            /**
            * Cart opened.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            cartOpened: (event) => {

                $$6(document).trigger("addonifyFloatingCartOpened", event);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartOpened", { detail: event }));
            },

            /**
            * Cart closed.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            cartClosed: (event) => {

                $$6(document).trigger("addonifyFloatingCartClosed", event);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartClosed", { detail: event }));
            },

            /**
            * Cart updated.
            * Main event for cart changes. This event is triggered when any cart related changes occurs.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            cartUpdated: (event) => {

                $$6(document).trigger("addonifyFloatingCartUpdated", event);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartUpdated", { detail: event }));
            },

            /**
            * Cart emptied.
            * Main event triggered when cart is emptied.
            *
            * @param {null} null.
            * @return {void} void.
            * @since 1.0.0
            */
            cartEmptied: () => {

                $$6(document).trigger("addonifyFloatingCartEmptied");

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartEmptied"));

                // Also trigger WooCommerce event.
                $$6(document).trigger('wc_cart_emptied');
            },

            /**
            * Product removed from cart.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            productRemoved: (event) => {

                $$6(document).trigger("addonifyFloatingCartProductRemoved", event);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartProductRemoved", { detail: event }));

                // Also, triggers event cart updated.
                addonifyFloatingCart.api.event.cartUpdated(data);
            },

            /**
            * Product restored to cart.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            productRestored: (event) => {

                $$6(document).trigger("addonifyFloatingCartProductRestored", event);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartProductRestored", { detail: event }));

                // Also, triggers event cart updated.
                addonifyFloatingCart.api.event.cartUpdated(data);
            },

            /**
            * Coupon container opened.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            couponContainerOpened: (event) => {

                // [.... code block]
            },

            /**
            * Coupon applied.
            *
            * @param {object} data.
            * @return {void} void.
            * @since 1.0.0
            */
            couponApplied: (data) => {

                $$6(document).trigger("addonifyFloatingCartCouponApplied", data);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartCouponApplied", { detail: data }));

                // Also trigger cart updated event.
                addonifyFloatingCart.api.event.cartUpdated(data);
            },

            /**
            * Coupon removed.
            *
            * @param {object} data.
            * @return {void} void.
            * @since 1.0.0
            */
            couponRemoved: (data) => {

                $$6(document).trigger("addonifyFloatingCartCouponRemoved", data);

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartCouponRemoved", { detail: data }));

                // Also trigger cart updated event.
                addonifyFloatingCart.api.event.cartUpdated(data);
            },

            /**
            * Shipping address updated.
            *
            * @param {object} event.
            * @return {void} void.
            * @since 1.0.0
            */
            shippingAddressUpdated: (event) => {

                // [.... code block]
            },


            /**
            * Shopping meter threshold reached.
            *
            * @param {null} null.
            * @return {void} void.
            * @since 1.0.0
            */
            shoppingMeterThresholdReached: () => {

                $$6(document).trigger("addonifyFloatingCartShoppingMeterThresholdReached");

                document.dispatchEvent(new CustomEvent("addonifyFloatingCartShoppingMeterThresholdReached"));
            }
        };
    }

    const { action } = addonifyFloatingCart;

    function registerToastEvent() {

        action.toast = {

            /**
            * Dispatch notification toast messages.
            *
            * @param {string} style. [success | error]
            * @param {string} data. may also contain HTML.
            * @since: 1.1.9
            */
            dispatch: (style = 'success', data) => {

                if (typeof Notyf !== 'undefined') {

                    let notyf = new Notyf({
                        duration: notyfDuration,
                        dismissible: notfyIsDismissible,
                        ripple: true,
                        position: {
                            x: notfyPosition[1], // left | center | right
                            y: notfyPosition[0], // top | center | bottom
                        },
                    });

                    if (!data) {

                        throw new Error("Notification toast data/message is empty, bailing out...");
                    }

                    // Check if notification toast is enabled in backend.
                    if (style === 'success') {

                        if (showNotfy) {

                            notyf.success({
                                className: 'adfy__woofc-notfy-success',
                                message: data,
                            });
                        }
                    }

                    // Do not disable error notification toast.
                    if (style === 'error') {

                        notyf.error({

                            className: 'adfy__woofc-notfy-error',
                            message: data,
                        });
                    }
                }
            }
        };
    }

    const { $: $$5 } = addonifyFloatingCart;

    /**
    * Handle shopping meter animation.
    * 
    * @param {null} null.
    * @return {void} void.
    * @since 1.1.8
    */
    const handleProgressbarAnimation = () => {

        const progressbarEle = $$5('#adfy__floating-cart .adfy__woofc-shipping-bar .progress-bars .live-progress-bar');

        if (progressbarEle) {

            const attrVal = parseInt(progressbarEle.attr('data_percentage'));

            if (attrVal >= 100) {

                progressbarEle.addClass("hide-animation");

                // Dispatch event, threshold reached.
                addonifyFloatingCart.api.event.shoppingMeterThresholdReached();

            } else {

                progressbarEle.removeClass("hide-animation");
            }
        }
    };

    /**
    * Display/Hide Cart trigger button.
    * 
    * @param {string} action. [show|hide]
    * @return {void} void.
    * @since 1.1.10
    */
    function triggerButtonVisibilityHandler(action) {

        if (!action) {

            throw new Error("Function requires action!");
        }

        const buttonEle = document.getElementById("adfy__woofc-trigger");

        if (buttonEle && buttonEle.hasAttribute('data_display')) {

            switch (action) {

                case "hide":
                    buttonEle.setAttribute('data_display', 'hidden');
                    break;
                case "show":
                    buttonEle.setAttribute('data_display', 'visible');
                    break;
                default:
                    console.warn("Invalid action provided! Valid actions are: [show|hide]");
                    break;
            }
        }
    }

    const { $: $$4 } = addonifyFloatingCart;

    function listenCartEvents() {

        /**
        * Prevent default event.
        *
        * @param {object} event.
        * @return {void} void.
        * @since 1.0.0
        */
        $$4(document).on('click', '.adfy__woofc-prevent-default', function (e) {

            e.preventDefault();
        });

        /**
        * Listen for cart open events.
        *
        * @param {object} event.
        * @return {void} void.
        * @since 1.0.0
        */
        $$4(document).on("click", ".adfy__show-woofc", function (e) {

            addonifyFloatingCart.action.cart.open(e);
        });

        if (openCartOnTriggerHover) {

            $$4(document).on('mouseover', '.adfy__show-woofc', function (e) {

                addonifyFloatingCart.action.cart.open(e);
            });
        }

        if (openCartOnViewCartClicked) {

            $$4(document).on('click', '.added_to_cart.wc-forward', function (e) {

                addonifyFloatingCart.action.cart.open(e);
            });
        }

        /**
        * Listen for cart close event.
        *
        * @param {object} event.
        * @return {void} void.
        * @since 1.0.0
        */
        $$4(document).on("click", ".adfy__hide-woofc", function (e) {

            e.preventDefault();

            addonifyFloatingCart.action.cart.close(e);
        });


        /**
        * Listen to cart updated event.
        * Trigger by internal API.
        *
        * @param {object} event.
        * @return {void} void.
        * @since 1.0.0
        */
        document.addEventListener("addonifyFloatingCartUpdated", () => {

            // Handle shopping meter animation.
            handleProgressbarAnimation();
        });

        /**
        * Listen to cart item restored event.
        * Trigger by internal API.
        *
        * @return {void} void.
        * @since 1.0.0
        */
        document.addEventListener("addonifyFloatingCartItemRestored", () => {

            // Display trigger button if it was hidden initially.
            if (hideTriggerButtonIfCartIsEmpty) {

                triggerButtonVisibilityHandler('show');
            }
        });
    }

    const { $: $$3 } = addonifyFloatingCart;

    function listenWooCommerceEvents() {

        /**
        * Listen to WooCommerce events.
        *
        * @param {object} event.
        * @return {void} void.
        * @since 1.0.0
        */
        $$3(document).on("added_to_cart", function (e, fragments, cart_hash, button) {

            if (openCartOnAddedToCart) {

                addonifyFloatingCart.action.cart.open(e);
            }
        });

        $$3(document.body).on('wc_cart_emptied', function (event) {


        });
    }

    const initCustomScrollbar = () => {

        const targetEle = document.getElementById("adfy__floating-cart");

        const config = { attributes: false, childList: true, subtree: true };

        const callback = (mutationList) => {

            if (mutationList.length > 0) {

                // Initialize the scrollbar.
                scrollbar();
            }
        };

        // Create an observer instance linked to the callback function
        const observer = new MutationObserver(callback);

        // Start observing the target node for configured mutations
        observer.observe(targetEle, config);
    };

    const scrollbar = () => {

        const scrollableEle = document.getElementById("adfy__woofc-scrollbar");
        const psInitiliazed = scrollableEle.classList.contains("ps");

        if (scrollableEle) {

            if (!psInitiliazed) {

                new PerfectScrollbar(scrollableEle, {
                    wheelSpeed: 1,
                    wheelPropagation: true,
                    minScrollbarLength: 20
                });
            }
        }
    };

    const { $: $$2 } = addonifyFloatingCart;

    /**
    * Display/Hide alert messages.
    *
    * @param {string} action to perform. (show | hide)
    * @param {string} style of alert message. (info | error)
    * @param {string} data, may also contain HTML.
    * @since: 1.1.9
    */
    function alertVisibilityHandler(action = "hide", style = "info", data = "") {

        let timeout;
        const alertEle = $$2("#adfy__floating-cart #adfy__woofc-cart-errors");

        const hideAlert = () => {

            clearTimeout(timeout);

            if (alertEle.hasClass('error')) {
                alertEle.removeClass('error');
            }

            alertEle.html(" ").addClass('hidden');
        };

        switch (action) {
            case "show":
                if (!data) {
                    throw new Error("Alert message is required!");
                }

                // Check if alert message is error.
                style === "error" ? alertEle.addClass("error") : alertEle.removeClass("error");

                // Clear the previous message & add new message.
                alertEle.html(" ").html(data).removeClass('hidden');

                // Set timeout to hide the alert message.
                // Static 10 seconds.
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    hideAlert();
                    clearTimeout(timeout);
                }, 10000);
                break;

            case "hide":
                hideAlert();
                break;

            default:
                hideAlert();
                break;
        }
    }

    /**
    * Display/Hide coupon alert messages.
    *
    * @param {string} action. (hide | show)
    * @param {object} data. - (style, message).
    * @return {void} void.
    * @since: 1.1.9
    */
    function couponAlertVisibilityHandler(action, data = null) {

        if (!action) {

            throw new Error("Coupon alert action is required!");
        }

        let alertsEle = $$2('#adfy__floating-cart .adfy__woofc-alert');

        const hideAlert = () => {

            let timeout;

            clearTimeout(timeout);

            timeout = setTimeout(() => {

                $$2(alertsEle).fadeOut();

                clearTimeout(timeout);

            }, 10000);
        };

        if (action === "hide") {

            hideAlert();
            return;

        } else {

            if (alertsEle.length > 0) {

                const icons = {
                    "success": '<svg fill="currentColor" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/></svg>',
                    "error": '<svg fill="currentColor" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/></svg>'
                };

                if (!data) {

                    throw new Error("Coupon alert data is required!");
                }

                const { style, message } = data;

                if (!style || !message) {

                    throw new Error("Coupon alert style & message is required!");
                }

                let content;

                switch (style) {
                    case "success":
                        content = `<p class="adfy__woofc-alert-text">
                        ${icons['success']}
                        ${message}
                    </p>`;

                        $$2('.adfy__woofc-alert.success').html(" ").html(content).fadeIn();
                        hideAlert();
                        break;

                    case "error":
                        content = `<p class="adfy__woofc-alert-text">
                        ${icons['error']}
                        ${message}
                    </p>`;

                        $$2('.adfy__woofc-alert.error').html(" ").html(content).fadeIn();
                        hideAlert();
                        break;
                }
            }
        }
    }

    const { $: $$1 } = addonifyFloatingCart;
    const { __ } = wp.i18n;

    /**
    * Handles quantity adjustment in cart.
    *
    * @return {void} void.
    * @since: 1.0.0
    */
    function listenProductQtyFormEvents() {

        // Handle quantity increment event.
        $$1(document).on('click', '.adfy__woofc-item .adfy__woofc-inc-quantity', function (e) {

            e.preventDefault();

            const inputField = $$1(this).prev();

            if (
                parseInt(inputField.val()) < parseInt(inputField.attr('max')) ||
                inputField.attr('max') === ''
            ) {
                updateProductQtyViaAjax(this, 'add');
            }
        });

        // Handle quantity decrement event.
        $$1(document).on('click', '.adfy__woofc-item .adfy__woofc-dec-quantity', function (e) {

            e.preventDefault();

            const inputField = $$1(this).next();

            if (parseInt(inputField.val()) <= parseInt(inputField.attr('min'))) {
                return;
            }

            updateProductQtyViaAjax(this, 'sub');
        });

        // Handle manual quantity input event.
        $$1(document).on('change', '.adfy__woofc-item .adfy__woofc-quantity-input-field', function (e) {

            e.preventDefault();
            updateProductQtyViaAjax(this, 'update', $$1(this).val());
        });
    }

    /**
    * Handles remove product from cart.
    *
    * @return {void} void.
    * @since: 1.0.0
    */
    function listenProductRemoveEvents() {

        $$1(document).on('click', '.adfy__woofc-item .thumb .product-remove', function (e) {

            e.preventDefault();

            const productId = $$1(this).attr("data-product_id");
            const cartItemKey = $$1(this).attr("data-cart_item_key");
            const thisButton = $$1(this);

            $$1.ajax({
                type: 'POST',
                dataType: 'json',
                url: ajaxUrl,
                data: {
                    action: ajaxRemoveFromCartAction,
                    product_id: productId,
                    cart_item_key: cartItemKey,
                    nonce: nonce
                },
                success: function (res) {

                    if (!res || res.error) {

                        throw new Error("Error removing product from cart!");
                    }

                    $$1('.post-' + productId).find('a.wc-forward').remove();
                    $$1('.post-' + productId).find('a.add_to_cart_button').removeClass('added');

                    let fragments = res.fragments;

                    // Replace the fragments.
                    if (fragments) {

                        $$1.each(fragments, function (key, value) {

                            $$1(key).replaceWith(value);
                        });
                    }

                    // Fire the alert message.
                    alertVisibilityHandler('show', 'info', res.undo_product_link);

                    if (res.cart_items_count === 0) {

                        // Dispatch cartEmptied event.
                        addonifyFloatingCart.api.event.cartEmptied();

                        $$1('.adfy__woofc-content-entry').html(res.empty_cart_message);
                    }

                    // Dispatch removed_from_cart event.
                    $$1(document).trigger('removed_from_cart', [res.fragments, res.cart_hash, thisButton]);

                    // Dispatch WC event.
                    $$1(document).trigger('wc_update_cart');

                    // Dispatch event cart updated.
                    addonifyFloatingCart.api.event.cartUpdated(res);
                },
                error: function (err) {

                    console.log(err);
                    const message = __('Error processing product removal request!', 'addonify-floating-cart');
                    // Dispatch toast notification.
                    addonifyFloatingCart.action.toast.dispatch('error', message);
                },
                always: function () {

                    // Remove spinner.
                    $$1('#adfy__woofc-spinner-container').addClass('hidden').removeClass('visible');
                }
            });
        });
    }

    /**
    * Restore product to cart event.
    *
    * @return {void} void.
    * @since: 1.0.0
    */
    function listenProductRestoreEvents() {

        $$1(document).on('click', '#adfy__woofc_restore_item', function (e) {

            e.preventDefault();

            const itemKey = $$1(this).attr('data-item_key');

            // Add spinner.
            $$1('#adfy__woofc-spinner-container').addClass('visible').removeClass('hidden');

            $$1.ajax({
                type: 'POST',
                dataType: 'json',
                url: ajaxUrl,
                data: {
                    action: ajaxRestoreCartItemAction,
                    cart_item_key: itemKey,
                    nonce: nonce
                },
                success: function (res) {

                    if (!res.fragments || res.error) throw new Error("Error restoring product to cart!");

                    const fragments = res.fragments;
                    const cartFooterEle = $$1('.adfy__woofc-colophon');
                    const shoppingMeterEle = $$1('.adfy__woofc-shipping-bar');

                    if (fragments) {

                        $$1.each(fragments, function (key, value) {
                            $$1(key).replaceWith(value);
                        });
                    }

                    if (cartFooterEle.hasClass('adfy__woofc-hidden')) {
                        cartFooterEle.removeClass('adfy__woofc-hidden');
                    }

                    if (shoppingMeterEle.hasClass('adfy__woofc-hidden')) {
                        shoppingMeterEle.removeClass('adfy__woofc-hidden');
                    }

                    // Dispatch event product restored.
                    addonifyFloatingCart.api.event.productRestored(fragments);

                    // Hide alert messages if any.
                    alertVisibilityHandler("hide");
                },
                error: function (err) {
                    console.log(err);
                    const message = __('Error processing product restore request!', 'addonify-floating-cart');
                    // Dispatch toast notification.
                    addonifyFloatingCart.action.toast.dispatch('error', message);
                },
                always: function () {
                    // Hide spinner.
                    $$1('#adfy__woofc-spinner-container').addClass('hidden').removeClass('visible');
                }
            });
        });
    }

    /**
    * Update cart qty via AJAX.
    *
    * @param {string} currentEle.
    * @param {string} action.
    * @param {number} quantity.
    * @return {void} void.
    * @since 1.0.0
    */
    async function updateProductQtyViaAjax(currentEle, action, quantity = 1) {

        if (!currentEle) {

            throw new Error("Function [updateCartViaAjax] requires current element!");
        }

        if (!action) {

            throw new Error("Function [updateCartViaAjax] requires action!");
        }

        let productQuantity;

        switch (action) {
            case "add":
                productQuantity = $$1(currentEle).next();
                break;
            case "sub":
                productQuantity = $$1(currentEle).prev();
                break;
            default:
                productQuantity = $$1(currentEle);
        }

        let productId = $$1(currentEle).attr("data-product_id");
        let cartItemKey = $$1(currentEle).attr("data-cart_item_key");
        let productContainer = $$1(currentEle).parents('.adfy__woofc-item');

        // Add loader
        $$1('#adfy__woofc-spinner-container').addClass('visible').removeClass('hidden');

        try {
            const res = await $$1.ajax({
                type: 'POST',
                dataType: 'json',
                url: ajaxUrl,
                data: {
                    action: ajaxUpdateCartAction,
                    product_id: productId,
                    cart_item_key: cartItemKey,
                    nonce: nonce,
                    type: action,
                    quantity: quantity
                },
            });

            if (!res || res.error) {

                throw new Error("Error updating cart via AJAX!");
            }

            let fragments = res.fragments;

            // Replace the cart fragments.
            if (fragments) {
                $$1.each(fragments, function (key, value) {
                    $$1(key).replaceWith(value);
                });
            }

            let nQuantity = res.nQuantity;

            if (nQuantity === 'OoS') {
                alert('Out of stock range');
                productQuantity.val(nQuantity);
            } else if (nQuantity !== 'nil') {
                if (action === 'add') {
                    productQuantity.val(nQuantity);
                } else if (action === 'sub') {
                    productQuantity.val(nQuantity);
                } else {
                    productQuantity.val(nQuantity);
                }
            }

            productContainer.find($$1('.adfy__woofc-item-price-multiplier-quantity')).html(nQuantity);

            productContainer.unblock();

            // Update cart
            $$1(document.body).trigger('wc_update_cart');

            // Dispatch event cart updated.
            addonifyFloatingCart.api.event.cartUpdated(res);

        } catch (err) {
            const message = __('Error processing product quantity update request!', 'addonify-floating-cart');

            // Dispatch toast notification.
            addonifyFloatingCart.action.toast.dispatch('error', message);
            throw new Error(err);

        } finally {

            // Remove loader
            $$1('#adfy__woofc-spinner-container').addClass('hidden').removeClass('visible');
        }
    }

    const { $ } = addonifyFloatingCart;

    /**
     * Open close coupon container.
     * 
     * @return {void} void.
     * @since 1.2.1
     */
    function listenCouponContainerEvents() {

        const couponContainer = $('#adfy__woofc-coupon-container');

        $(document).on('click', '#adfy__woofc-coupon-trigger', function (e) {

            e.preventDefault();

            couponContainer.attr('data_display', 'visible');
        });

        $(document).on('click', '#adfy__woofc-hide-coupon-container', function (e) {

            e.preventDefault();

            couponContainer.attr('data_display', 'hidden');
        });
    }

    /**
     * Handle coupon apply event via AJAX.
     * 
     * @return {void} void.
     * @since 1.2.1
     */
    function applyCouponHandler() {

        const { __ } = wp.i18n;
        let message;

        // Apply coupon on cart items.
        $(document).on('submit', '#adfy__woofc-coupon-form', function (e) {

            e.preventDefault();

            let couponField = $(this).find('input[name=adfy__woofc-coupon-input-field]');
            let data = couponField.val();

            $.ajax({
                'url': ajaxUrl,
                'method': 'post',
                'data': {
                    action: ajaxApplyCouponCodeAction,
                    nonce: nonce,
                    form_data: data
                },
                success: function (res) {

                    let result = JSON.parse(res);

                    if (!result) {

                        message = __('Error processing coupon request.', 'addonify-floating-cart');
                        addonifyFloatingCart.action.toast.dispatch('error', message);
                        return;
                    }

                    const { appliedCoupons, couponApplied, html, status } = result;
                    const subtotalEle = $('.adfy__woofc-cart-summary ul li.sub-total');
                    const discountEle = $('.adfy__woofc-cart-summary ul li.discount');

                    if (!couponApplied) {

                        // Display coupon alert messages.
                        couponAlertVisibilityHandler('show', {
                            style: 'error',
                            message: status
                        });

                        return;
                    }

                    if (couponApplied) {

                        couponField.val('');

                        $.each(html, function (i, val) {

                            $(i).replaceWith(val);
                        });

                        // Display coupon alert messages.
                        couponAlertVisibilityHandler('show', {
                            style: 'success',
                            message: status
                        });

                        // Dispatch 'couponApplied' event.
                        addonifyFloatingCart.api.event.couponApplied(result);

                        if (appliedCoupons > 0) {

                            subtotalEle.removeClass('adfy__woofc-hidden');
                            discountEle.removeClass('adfy__woofc-hidden');
                        }
                    }
                },
                error: function (err) {

                    console.log(err);
                    message = __('Error processing coupon request.', 'addonify-floating-cart');

                    // Dispatch toast.
                    addonifyFloatingCart.action.toast.dispatch('error', message);

                    // Display coupon alert messages.
                    couponAlertVisibilityHandler('show', {
                        style: 'error',
                        message: message
                    });
                }
            });
        });
    }

    /**
     * Handle coupon remove event via AJAX.
     * 
     * @return {void} void.
     * @since 1.2.1
     */
    function removeCouponHandler() {

        const { __ } = wp.i18n;
        let message;

        $(document).on('click', '.adfy__woofc-remove-applied-coupon-button', function (e) {

            e.preventDefault();

            let couponEle = $(this).closest('li');
            let coupon = $(this).attr('data-coupon');

            $.ajax({
                'url': ajaxUrl,
                'method': 'post',
                'data': {
                    action: ajaxRemoveCouponCodeAction,
                    nonce: nonce,
                    form_data: coupon
                },
                success: function (res) {

                    let result = JSON.parse(res);

                    console.log(result);

                    if (!result) {

                        message = __('Error processing coupon request.', 'addonify-floating-cart');

                        couponAlertVisibilityHandler('show', {
                            style: 'error',
                            message: message
                        });

                        return;
                    }

                    const { appliedCoupons, couponRemoved, html, status } = result;

                    if (couponRemoved) {

                        const subtotalEle = $('.adfy__woofc-cart-summary ul li.sub-total');
                        const discountEle = $('.adfy__woofc-cart-summary ul li.discount');

                        $.each(html, function (i, val) {

                            $(i).replaceWith(val);
                        });

                        couponAlertVisibilityHandler('show', {
                            style: 'success',
                            message: status
                        });

                        // Remove coupon element.
                        couponEle.remove();

                        // Dispatch 'couponRemoved' event.
                        addonifyFloatingCart.api.event.couponRemoved(result);

                        if (appliedCoupons > 0) {

                            subtotalEle.removeClass('adfy__woofc-hidden');
                            discountEle.removeClass('adfy__woofc-hidden');
                        }
                    }
                },
                error: function (err) {

                    console.log(err);

                    message = __('Error processing coupon request.', 'addonify-floating-cart');

                    couponAlertVisibilityHandler('show', {
                        style: 'error',
                        message: message
                    });
                }
            });
        });
    }

    /**
    * DOMContentLoaded event listener.
    *
    * @since 1.0.0
    */
    document.addEventListener("DOMContentLoaded", function () {

        initCustomScrollbar();
    });

    /**
    * jQuery self executing function.
    *
    * @since 1.2.1
    */
    (function ($) {

        registerCartActionEvents();
        registerCustomEventsDispatchers();
        registerToastEvent();

        $(document).ready(function () {
            refreshCart();

            // Cart related events.
            listenCartEvents();

            // WooCommerce related events.
            listenWooCommerceEvents();

            // Product related events.
            listenProductQtyFormEvents();
            listenProductRemoveEvents();
            listenProductRestoreEvents();

            // Coupon related events.
            listenCouponContainerEvents();
            applyCouponHandler();
            removeCouponHandler();
        });

    })(jQuery);

}));
